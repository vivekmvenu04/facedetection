# Install OpenCV
!pip install opencv-python-headless --quiet

# Import required libraries
import cv2
import numpy as np
from google.colab.patches import cv2_imshow
from google.colab import output
from IPython.display import Javascript
from base64 import b64decode

# Load Haar Cascade
face_cascade = cv2.CascadeClassifier(cv2.data.haarcascades + 'haarcascade_frontalface_default.xml')

# JavaScript to capture webcam image
# JavaScript to define the takePhoto function (do not call it here)
js_code = '''
async function takePhoto(quality) {
  const div = document.createElement('div');
  const capture = document.createElement('button');
  capture.textContent = 'ðŸ“¸ Capture';
  div.appendChild(capture);

  const video = document.createElement('video');
  video.style.display = 'block';
  video.style.width = '400px';
  div.appendChild(video);
  document.body.appendChild(div);

  const stream = await navigator.mediaDevices.getUserMedia({video: true});
  video.srcObject = stream;
  await video.play();

  google.colab.output.setIframeHeight(document.documentElement.scrollHeight, true);

  return new Promise((resolve) => {
    capture.onclick = () => {
      const canvas = document.createElement('canvas');
      canvas.width = video.videoWidth;
      canvas.height = video.videoHeight;
      canvas.getContext('2d').drawImage(video, 0, 0);
      stream.getTracks().forEach(track => track.stop());
      div.remove();
      resolve(canvas.toDataURL('image/jpeg', quality));
    };
  });
}
'''

# Display the JS function
display(Javascript(js_code))

# Call the function only once
data = output.eval_js('takePhoto(0.9)')


# Convert base64 image to OpenCV format
binary = b64decode(data.split(',')[1])
with open("webcam.jpg", "wb") as f:
    f.write(binary)

# Load image and detect face
img = cv2.imread("webcam.jpg")
gray = cv2.cvtColor(img, cv2.COLOR_BGR2GRAY)
faces = face_cascade.detectMultiScale(gray, scaleFactor=1.3, minNeighbors=5)

# Draw rectangles around faces
for (x, y, w, h) in faces:
    cv2.rectangle(img, (x, y), (x+w, y+h), (0, 255, 0), 2)

# Display result
cv2_imshow(img)
